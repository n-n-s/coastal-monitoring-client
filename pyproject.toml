[project]
name = "coastal-monitoring-client"
version = "0.1.0"
description = "Python client for the coastalmonitoring.org APIe"
readme = "README.md"
authors = [
    { name = "Sam Northover-Naylor" }
]
requires-python = ">=3.11"
dependencies = [
    "pydantic>=2.10.4",
    "requests>=2.32.3",
]

[dependency-groups]
dev = [
    "coverage>=7.6.10",
    "mypy>=1.14.1",
    "poethepoet>=0.32.0",
    "pytest>=8.3.4",
    "responses>=0.25.3",
    "types-requests>=2.32.0.20241016",
]
lint = [
    "ruff>=0.8.5",
]

[tool.uv]
default-groups = ["dev", "lint"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # docstrings
    "D",
]
extend-ignore = [
    "D203",  # conflicts with D211
    "D213",  # conflicts with D212
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**.py" = ["D"]


[tool.mypy]
exclude = [".venv/*"]


[tool.coverage.run]
source = ["src/coastal_monitoring_client"]
omit = ["tests/*"]

[tool.coverage.report]
skip_empty = true


[tool.poe.tasks]

[tool.poe.tasks.lint]
sequence = [
    { shell = "uv run ruff format ." },
    { shell = "uv run ruff check . --fix" },
    { shell = "uv run mypy ." }
]

[tool.poe.tasks.lint-check]
sequence = [
    { shell = "uv run ruff format . --check" },
    { shell = "uv run ruff check ." },
    { shell = "uv run mypy ." }
]

[tool.poe.tasks.test]
sequence = [
    { shell = "uv run coverage run -m pytest . ./tests" },
    { shell = "uv run coverage report -m" }
]

[tool.poe.tasks.all]
sequence = ["lint-check", "test"]
